"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class rc_cmd_t(object):

    __slots__ = ["linearVelX", "linearVelY", "linearVelZ", "angularVelX", "angularVelY", "angularVelZ", "roll", "pitch", "yaw", "bodyHeight", "stepHeight", "mode", "gait", "update"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "int32_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.linearVelX = 0.0
        """ LCM Type: float """
        self.linearVelY = 0.0
        """ LCM Type: float """
        self.linearVelZ = 0.0
        """ LCM Type: float """
        self.angularVelX = 0.0
        """ LCM Type: float """
        self.angularVelY = 0.0
        """ LCM Type: float """
        self.angularVelZ = 0.0
        """ LCM Type: float """
        self.roll = 0.0
        """ LCM Type: float """
        self.pitch = 0.0
        """ LCM Type: float """
        self.yaw = 0.0
        """ LCM Type: float """
        self.bodyHeight = 0.0
        """ LCM Type: float """
        self.stepHeight = 0.0
        """ LCM Type: float """
        self.mode = 0
        """ LCM Type: int32_t """
        self.gait = 0
        """ LCM Type: int32_t """
        self.update = 0
        """ LCM Type: int32_t """

    def encode(self):
        buf = BytesIO()
        buf.write(rc_cmd_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">fffffffffffiii", self.linearVelX, self.linearVelY, self.linearVelZ, self.angularVelX, self.angularVelY, self.angularVelZ, self.roll, self.pitch, self.yaw, self.bodyHeight, self.stepHeight, self.mode, self.gait, self.update))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != rc_cmd_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return rc_cmd_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = rc_cmd_t()
        self.linearVelX, self.linearVelY, self.linearVelZ, self.angularVelX, self.angularVelY, self.angularVelZ, self.roll, self.pitch, self.yaw, self.bodyHeight, self.stepHeight, self.mode, self.gait, self.update = struct.unpack(">fffffffffffiii", buf.read(56))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if rc_cmd_t in parents: return 0
        tmphash = (0xc8177d4edc402ba4) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if rc_cmd_t._packed_fingerprint is None:
            rc_cmd_t._packed_fingerprint = struct.pack(">Q", rc_cmd_t._get_hash_recursive([]))
        return rc_cmd_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", rc_cmd_t._get_packed_fingerprint())[0]

