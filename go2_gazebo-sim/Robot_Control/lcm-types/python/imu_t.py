"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class imu_t(object):

    __slots__ = ["quaternion", "gyroscope", "accelerometer", "rpy"]

    __typenames__ = ["float", "float", "float", "float"]

    __dimensions__ = [[4], [3], [3], [3]]

    def __init__(self):
        self.quaternion = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.gyroscope = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: float[3] """
        self.accelerometer = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: float[3] """
        self.rpy = [ 0.0 for dim0 in range(3) ]
        """ LCM Type: float[3] """

    def encode(self):
        buf = BytesIO()
        buf.write(imu_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>4f', *self.quaternion[:4]))
        buf.write(struct.pack('>3f', *self.gyroscope[:3]))
        buf.write(struct.pack('>3f', *self.accelerometer[:3]))
        buf.write(struct.pack('>3f', *self.rpy[:3]))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != imu_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return imu_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = imu_t()
        self.quaternion = struct.unpack('>4f', buf.read(16))
        self.gyroscope = struct.unpack('>3f', buf.read(12))
        self.accelerometer = struct.unpack('>3f', buf.read(12))
        self.rpy = struct.unpack('>3f', buf.read(12))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if imu_t in parents: return 0
        tmphash = (0x7ceb3fd0e4ae0cfd) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if imu_t._packed_fingerprint is None:
            imu_t._packed_fingerprint = struct.pack(">Q", imu_t._get_hash_recursive([]))
        return imu_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", imu_t._get_packed_fingerprint())[0]

