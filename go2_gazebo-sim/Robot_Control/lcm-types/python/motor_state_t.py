"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class motor_state_t(object):

    __slots__ = ["q_abad", "q_hip", "q_knee", "qd_abad", "qd_hip", "qd_knee", "tau_abad", "tau_hip", "tau_knee", "footForce"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[4], [4], [4], [4], [4], [4], [4], [4], [4], [4]]

    def __init__(self):
        self.q_abad = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.q_hip = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.q_knee = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.qd_abad = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.qd_hip = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.qd_knee = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.tau_abad = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.tau_hip = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.tau_knee = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """
        self.footForce = [ 0.0 for dim0 in range(4) ]
        """ LCM Type: float[4] """

    def encode(self):
        buf = BytesIO()
        buf.write(motor_state_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>4f', *self.q_abad[:4]))
        buf.write(struct.pack('>4f', *self.q_hip[:4]))
        buf.write(struct.pack('>4f', *self.q_knee[:4]))
        buf.write(struct.pack('>4f', *self.qd_abad[:4]))
        buf.write(struct.pack('>4f', *self.qd_hip[:4]))
        buf.write(struct.pack('>4f', *self.qd_knee[:4]))
        buf.write(struct.pack('>4f', *self.tau_abad[:4]))
        buf.write(struct.pack('>4f', *self.tau_hip[:4]))
        buf.write(struct.pack('>4f', *self.tau_knee[:4]))
        buf.write(struct.pack('>4f', *self.footForce[:4]))

    @staticmethod
    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != motor_state_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return motor_state_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = motor_state_t()
        self.q_abad = struct.unpack('>4f', buf.read(16))
        self.q_hip = struct.unpack('>4f', buf.read(16))
        self.q_knee = struct.unpack('>4f', buf.read(16))
        self.qd_abad = struct.unpack('>4f', buf.read(16))
        self.qd_hip = struct.unpack('>4f', buf.read(16))
        self.qd_knee = struct.unpack('>4f', buf.read(16))
        self.tau_abad = struct.unpack('>4f', buf.read(16))
        self.tau_hip = struct.unpack('>4f', buf.read(16))
        self.tau_knee = struct.unpack('>4f', buf.read(16))
        self.footForce = struct.unpack('>4f', buf.read(16))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if motor_state_t in parents: return 0
        tmphash = (0xd47ec5404e469865) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if motor_state_t._packed_fingerprint is None:
            motor_state_t._packed_fingerprint = struct.pack(">Q", motor_state_t._get_hash_recursive([]))
        return motor_state_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", motor_state_t._get_packed_fingerprint())[0]

