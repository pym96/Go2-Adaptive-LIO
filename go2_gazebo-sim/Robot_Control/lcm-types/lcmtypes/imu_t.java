/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 * lcm-gen 1.5.0
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class imu_t implements lcm.lcm.LCMEncodable
{
    /**
     * LCM Type: float[4]
     */
    public float quaternion[];

    /**
     * LCM Type: float[3]
     */
    public float gyroscope[];

    /**
     * LCM Type: float[3]
     */
    public float accelerometer[];

    /**
     * LCM Type: float[3]
     */
    public float rpy[];

 
    public imu_t()
    {
        quaternion = new float[4];
        gyroscope = new float[3];
        accelerometer = new float[3];
        rpy = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7ceb3fd0e4ae0cfdL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.imu_t.class))
            return 0L;
 
        classes.add(lcmtypes.imu_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.quaternion[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.gyroscope[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.accelerometer[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rpy[a]); 
        }
 
    }
 
    public imu_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public imu_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.imu_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.imu_t o = new lcmtypes.imu_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.quaternion = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.quaternion[a] = ins.readFloat();
        }
 
        this.gyroscope = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.gyroscope[a] = ins.readFloat();
        }
 
        this.accelerometer = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.accelerometer[a] = ins.readFloat();
        }
 
        this.rpy = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.imu_t copy()
    {
        lcmtypes.imu_t outobj = new lcmtypes.imu_t();
        outobj.quaternion = new float[(int) 4];
        System.arraycopy(this.quaternion, 0, outobj.quaternion, 0, 4); 
        outobj.gyroscope = new float[(int) 3];
        System.arraycopy(this.gyroscope, 0, outobj.gyroscope, 0, 3); 
        outobj.accelerometer = new float[(int) 3];
        System.arraycopy(this.accelerometer, 0, outobj.accelerometer, 0, 3); 
        outobj.rpy = new float[(int) 3];
        System.arraycopy(this.rpy, 0, outobj.rpy, 0, 3); 
        return outobj;
    }
 
}

